//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Net), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnPushCallback", OnPushCallback);
		L.RegFunction("RequestDelegate", RequestDelegate);
		L.RegFunction("ReBuildHearbeat", ReBuildHearbeat);
		L.RegFunction("Send", Send);
		L.RegFunction("OnHttpRespond", OnHttpRespond);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("RequestNotify", get_RequestNotify, set_RequestNotify);
		L.RegVar("NetErrorCallback", get_NetErrorCallback, set_NetErrorCallback);
		L.RegVar("CommonCallback", get_CommonCallback, set_CommonCallback);
		L.RegVar("HeadFormater", get_HeadFormater, set_HeadFormater);
		L.RegVar("NetSuccess", get_NetSuccess, null);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("CommonDataCallback", Net_CommonDataCallback);
		L.RegFunction("NetError", Net_NetError);
		L.RegFunction("RequestNotifyDelegate", Net_RequestNotifyDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPushCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
			SocketPackage arg0 = (SocketPackage)ToLua.CheckObject<SocketPackage>(L, 2);
			obj.OnPushCallback(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RequestDelegate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
			Net.Status arg0 = (Net.Status)ToLua.CheckObject(L, 2, typeof(Net.Status));
			obj.RequestDelegate(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReBuildHearbeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
			obj.ReBuildHearbeat();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<ActionParam>(L, 4))
			{
				Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Action<ActionResult> arg1 = (System.Action<ActionResult>)ToLua.CheckDelegate<System.Action<ActionResult>>(L, 3);
				ActionParam arg2 = (ActionParam)ToLua.ToObject(L, 4);
				obj.Send(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<Google.Protobuf.IMessage>(L, 4))
			{
				Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Action<ActionResult> arg1 = (System.Action<ActionResult>)ToLua.CheckDelegate<System.Action<ActionResult>>(L, 3);
				Google.Protobuf.IMessage arg2 = (Google.Protobuf.IMessage)ToLua.ToObject(L, 4);
				obj.Send(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<int, LuaInterface.LuaFunction, LuaFramework.ByteBuffer>(L, 3))
			{
				Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				LuaFramework.ByteBuffer arg3 = (LuaFramework.ByteBuffer)ToLua.ToObject(L, 5);
				obj.Send(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Action<ActionResult>, Google.Protobuf.IMessage, bool>(L, 3))
			{
				Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Action<ActionResult> arg1 = (System.Action<ActionResult>)ToLua.ToObject(L, 3);
				Google.Protobuf.IMessage arg2 = (Google.Protobuf.IMessage)ToLua.ToObject(L, 4);
				bool arg3 = LuaDLL.lua_toboolean(L, 5);
				obj.Send(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes<System.Action<ActionResult>, ActionParam, bool>(L, 3))
			{
				Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Action<ActionResult> arg1 = (System.Action<ActionResult>)ToLua.ToObject(L, 3);
				ActionParam arg2 = (ActionParam)ToLua.ToObject(L, 4);
				bool arg3 = LuaDLL.lua_toboolean(L, 5);
				obj.Send(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Net.Send");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnHttpRespond(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Net obj = (Net)ToLua.CheckObject<Net>(L, 1);
			HttpPackage arg0 = (HttpPackage)ToLua.CheckObject<HttpPackage>(L, 2);
			obj.OnHttpRespond(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RequestNotify(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			Net.RequestNotifyDelegate ret = obj.RequestNotify;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RequestNotify on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetErrorCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			Net.NetError ret = obj.NetErrorCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NetErrorCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CommonCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			Net.CommonDataCallback ret = obj.CommonCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CommonCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HeadFormater(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			IHeadFormater ret = obj.HeadFormater;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HeadFormater on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetSuccess(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			int ret = obj.NetSuccess;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NetSuccess on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Net.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RequestNotify(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			Net.RequestNotifyDelegate arg0 = (Net.RequestNotifyDelegate)ToLua.CheckDelegate<Net.RequestNotifyDelegate>(L, 2);
			obj.RequestNotify = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RequestNotify on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NetErrorCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			Net.NetError arg0 = (Net.NetError)ToLua.CheckDelegate<Net.NetError>(L, 2);
			obj.NetErrorCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NetErrorCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CommonCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			Net.CommonDataCallback arg0 = (Net.CommonDataCallback)ToLua.CheckDelegate<Net.CommonDataCallback>(L, 2);
			obj.CommonCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CommonCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HeadFormater(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Net obj = (Net)o;
			IHeadFormater arg0 = (IHeadFormater)ToLua.CheckObject<IHeadFormater>(L, 2);
			obj.HeadFormater = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HeadFormater on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Net_CommonDataCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Net.CommonDataCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Net.CommonDataCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Net_NetError(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Net.NetError>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Net.NetError>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Net_RequestNotifyDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Net.RequestNotifyDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Net.RequestNotifyDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

