//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Pathfinding_PathWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Pathfinding.Path), typeof(System.Object));
		L.RegFunction("GetTotalLength", GetTotalLength);
		L.RegFunction("WaitForPath", WaitForPath);
		L.RegFunction("CalculateHScore", CalculateHScore);
		L.RegFunction("GetTagPenalty", GetTagPenalty);
		L.RegFunction("GetHTarget", GetHTarget);
		L.RegFunction("CanTraverse", CanTraverse);
		L.RegFunction("GetTraversalCost", GetTraversalCost);
		L.RegFunction("GetConnectionSpecialCost", GetConnectionSpecialCost);
		L.RegFunction("IsDone", IsDone);
		L.RegFunction("AdvanceState", AdvanceState);
		L.RegFunction("GetState", GetState);
		L.RegFunction("LogError", LogError);
		L.RegFunction("ForceLogError", ForceLogError);
		L.RegFunction("Log", Log);
		L.RegFunction("Error", Error);
		L.RegFunction("OnEnterPool", OnEnterPool);
		L.RegFunction("Reset", Reset);
		L.RegFunction("Claim", Claim);
		L.RegFunction("ReleaseSilent", ReleaseSilent);
		L.RegFunction("Release", Release);
		L.RegFunction("DebugString", DebugString);
		L.RegFunction("ReturnPath", ReturnPath);
		L.RegFunction("PrepareBase", PrepareBase);
		L.RegFunction("Prepare", Prepare);
		L.RegFunction("Cleanup", Cleanup);
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("CalculateStep", CalculateStep);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("callback", get_callback, set_callback);
		L.RegVar("immediateCallback", get_immediateCallback, set_immediateCallback);
		L.RegVar("path", get_path, set_path);
		L.RegVar("vectorPath", get_vectorPath, set_vectorPath);
		L.RegVar("duration", get_duration, set_duration);
		L.RegVar("searchIterations", get_searchIterations, set_searchIterations);
		L.RegVar("searchedNodes", get_searchedNodes, set_searchedNodes);
		L.RegVar("nnConstraint", get_nnConstraint, set_nnConstraint);
		L.RegVar("heuristic", get_heuristic, set_heuristic);
		L.RegVar("heuristicScale", get_heuristicScale, set_heuristicScale);
		L.RegVar("enabledTags", get_enabledTags, set_enabledTags);
		L.RegVar("pathHandler", get_pathHandler, null);
		L.RegVar("CompleteState", get_CompleteState, null);
		L.RegVar("error", get_error, null);
		L.RegVar("errorLog", get_errorLog, null);
		L.RegVar("callTime", get_callTime, null);
		L.RegVar("pathID", get_pathID, null);
		L.RegVar("tagPenalties", get_tagPenalties, set_tagPenalties);
		L.RegVar("FloodingPath", get_FloodingPath, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTotalLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			float o = obj.GetTotalLength();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WaitForPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			System.Collections.IEnumerator o = obj.WaitForPath();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateHScore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			uint o = obj.CalculateHScore(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTagPenalty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			uint o = obj.GetTagPenalty(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			Pathfinding.Int3 o = obj.GetHTarget();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanTraverse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			bool o = obj.CanTraverse(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTraversalCost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			uint o = obj.GetTraversalCost(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConnectionSpecialCost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			Pathfinding.GraphNode arg0 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 2);
			Pathfinding.GraphNode arg1 = (Pathfinding.GraphNode)ToLua.CheckObject<Pathfinding.GraphNode>(L, 3);
			uint arg2 = (uint)LuaDLL.luaL_checknumber(L, 4);
			uint o = obj.GetConnectionSpecialCost(arg0, arg1, arg2);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsDone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			bool o = obj.IsDone();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AdvanceState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			PathState arg0 = (PathState)ToLua.CheckObject(L, 2, typeof(PathState));
			obj.AdvanceState(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			PathState o = obj.GetState();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.LogError(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ForceLogError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.ForceLogError(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Log(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Log(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Error(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.Error();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnterPool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.OnEnterPool();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Claim(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Claim(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseSilent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.ReleaseSilent(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Release(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DebugString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			PathLog arg0 = (PathLog)ToLua.CheckObject(L, 2, typeof(PathLog));
			string o = obj.DebugString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReturnPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.ReturnPath();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrepareBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			Pathfinding.PathHandler arg0 = (Pathfinding.PathHandler)ToLua.CheckObject<Pathfinding.PathHandler>(L, 2);
			obj.PrepareBase(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Prepare(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.Prepare();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cleanup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.Cleanup();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			obj.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateStep(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Pathfinding.Path obj = (Pathfinding.Path)ToLua.CheckObject<Pathfinding.Path>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.CalculateStep(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_callback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			OnPathDelegate ret = obj.callback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index callback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_immediateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			OnPathDelegate ret = obj.immediateCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index immediateCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.Collections.Generic.List<Pathfinding.GraphNode> ret = obj.path;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_vectorPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.Collections.Generic.List<UnityEngine.Vector3> ret = obj.vectorPath;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vectorPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			float ret = obj.duration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_searchIterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int ret = obj.searchIterations;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index searchIterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_searchedNodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int ret = obj.searchedNodes;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index searchedNodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nnConstraint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.NNConstraint ret = obj.nnConstraint;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nnConstraint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Heuristic ret = obj.heuristic;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			float ret = obj.heuristicScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabledTags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int ret = obj.enabledTags;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enabledTags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathHandler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.PathHandler ret = obj.pathHandler;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathHandler on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CompleteState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			PathCompleteState ret = obj.CompleteState;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CompleteState on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_error(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			bool ret = obj.error;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index error on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_errorLog(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			string ret = obj.errorLog;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index errorLog on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_callTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.DateTime ret = obj.callTime;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index callTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pathID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			ushort ret = obj.pathID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pathID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tagPenalties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int[] ret = obj.tagPenalties;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tagPenalties on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FloodingPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			bool ret = obj.FloodingPath;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FloodingPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_callback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			OnPathDelegate arg0 = (OnPathDelegate)ToLua.CheckDelegate<OnPathDelegate>(L, 2);
			obj.callback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index callback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_immediateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			OnPathDelegate arg0 = (OnPathDelegate)ToLua.CheckDelegate<OnPathDelegate>(L, 2);
			obj.immediateCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index immediateCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_path(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.Collections.Generic.List<Pathfinding.GraphNode> arg0 = (System.Collections.Generic.List<Pathfinding.GraphNode>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Pathfinding.GraphNode>));
			obj.path = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index path on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_vectorPath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			System.Collections.Generic.List<UnityEngine.Vector3> arg0 = (System.Collections.Generic.List<UnityEngine.Vector3>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.Vector3>));
			obj.vectorPath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index vectorPath on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.duration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_searchIterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.searchIterations = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index searchIterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_searchedNodes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.searchedNodes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index searchedNodes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_nnConstraint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Pathfinding.NNConstraint arg0 = (Pathfinding.NNConstraint)ToLua.CheckObject<Pathfinding.NNConstraint>(L, 2);
			obj.nnConstraint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nnConstraint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			Heuristic arg0 = (Heuristic)ToLua.CheckObject(L, 2, typeof(Heuristic));
			obj.heuristic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_heuristicScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.heuristicScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index heuristicScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabledTags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.enabledTags = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enabledTags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tagPenalties(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Pathfinding.Path obj = (Pathfinding.Path)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.tagPenalties = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tagPenalties on a nil value");
		}
	}
}

