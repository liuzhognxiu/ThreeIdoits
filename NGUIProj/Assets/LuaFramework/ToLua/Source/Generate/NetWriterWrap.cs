//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetWriterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetWriter), typeof(System.Object));
		L.RegFunction("SetMd5Key", SetMd5Key);
		L.RegFunction("resetData", resetData);
		L.RegFunction("setSessionID", setSessionID);
		L.RegFunction("setUserID", setUserID);
		L.RegFunction("setStime", setStime);
		L.RegFunction("SetHeadBuffer", SetHeadBuffer);
		L.RegFunction("SetBodyData", SetBodyData);
		L.RegFunction("writeInt32", writeInt32);
		L.RegFunction("writeFloat", writeFloat);
		L.RegFunction("writeString", writeString);
		L.RegFunction("writeInt64", writeInt64);
		L.RegFunction("writeWord", writeWord);
		L.RegFunction("writeBuf", writeBuf);
		L.RegFunction("SetUrl", SetUrl);
		L.RegFunction("GetUrl", GetUrl);
		L.RegFunction("IsSocket", IsSocket);
		L.RegFunction("url_encode", url_encode);
		L.RegFunction("getMd5String", getMd5String);
		L.RegFunction("PostData", PostData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("IsGet", get_IsGet, null);
		L.RegVar("ResponseContentType", get_ResponseContentType, null);
		L.RegVar("MsgId", get_MsgId, null);
		L.RegVar("UserID", get_UserID, null);
		L.RegVar("SessionID", get_SessionID, null);
		L.RegVar("St", get_St, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMd5Key(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NetWriter.SetMd5Key(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int resetData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetWriter.resetData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setSessionID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NetWriter.setSessionID(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUserID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 1);
			NetWriter.setUserID(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setStime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NetWriter.setStime(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHeadBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.SetHeadBuffer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBodyData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.SetBodyData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.writeInt32(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.writeFloat(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.writeString(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ulong arg1 = LuaDLL.tolua_checkuint64(L, 3);
			obj.writeInt64(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeWord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			ushort arg1 = (ushort)LuaDLL.luaL_checknumber(L, 3);
			obj.writeWord(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeBuf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.writeBuf(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUrl(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				NetWriter.SetUrl(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				ResponseContentType arg1 = (ResponseContentType)ToLua.CheckObject(L, 2, typeof(ResponseContentType));
				NetWriter.SetUrl(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				ResponseContentType arg1 = (ResponseContentType)ToLua.CheckObject(L, 2, typeof(ResponseContentType));
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				NetWriter.SetUrl(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NetWriter.SetUrl");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = NetWriter.GetUrl();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSocket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = NetWriter.IsSocket();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int url_encode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.url_encode(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getMd5String(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				string o = NetWriter.getMd5String(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string o = NetWriter.getMd5String(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NetWriter.getMd5String");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PostData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetWriter obj = (NetWriter)ToLua.CheckObject<NetWriter>(L, 1);
			byte[] o = obj.PostData();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NetWriter.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsGet(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, NetWriter.IsGet);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResponseContentType(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NetWriter.ResponseContentType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MsgId(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, NetWriter.MsgId);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserID(IntPtr L)
	{
		try
		{
			LuaDLL.tolua_pushuint64(L, NetWriter.UserID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SessionID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NetWriter.SessionID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_St(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NetWriter.St);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

