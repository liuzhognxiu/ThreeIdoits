//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PomeloNetworkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PomeloNetworkManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("LuaTableTest", LuaTableTest);
		L.RegFunction("Request", Request);
		L.RegFunction("Connect", Connect);
		L.RegFunction("Login", Login);
		L.RegFunction("Register", _Register);
		L.RegFunction("Logout", Logout);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("IsConnected", get_IsConnected, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaTableTest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PomeloNetworkManager obj = (PomeloNetworkManager)ToLua.CheckObject<PomeloNetworkManager>(L, 1);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.LuaTableTest(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Request(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PomeloNetworkManager obj = (PomeloNetworkManager)ToLua.CheckObject<PomeloNetworkManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.Request(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				PomeloNetworkManager obj = (PomeloNetworkManager)ToLua.CheckObject<PomeloNetworkManager>(L, 1);
				obj.Connect();
				return 0;
			}
			else if (count == 4)
			{
				PomeloNetworkManager obj = (PomeloNetworkManager)ToLua.CheckObject<PomeloNetworkManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
				obj.Connect(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: PomeloNetworkManager.Connect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Login(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PomeloNetworkManager obj = (PomeloNetworkManager)ToLua.CheckObject<PomeloNetworkManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.Login(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Register(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PomeloNetworkManager obj = (PomeloNetworkManager)ToLua.CheckObject<PomeloNetworkManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.Register(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Logout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PomeloNetworkManager obj = (PomeloNetworkManager)ToLua.CheckObject<PomeloNetworkManager>(L, 1);
			obj.Logout();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PomeloNetworkManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsConnected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PomeloNetworkManager obj = (PomeloNetworkManager)o;
			bool ret = obj.IsConnected;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsConnected on a nil value");
		}
	}
}

