// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goods_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace UFramework {

  /// <summary>Holder for reflection information generated from goods_info.proto</summary>
  public static partial class GoodsInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for goods_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GoodsInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBnb29kc19pbmZvLnByb3RvEgp1RnJhbWV3b3JrIugGCgpHb29kc19JbmZv",
            "EhAKCGdvb2RzX2lkGAEgASgNEgwKBG5hbWUYAiABKAwSCwoDc2V4GAMgASgN",
            "EhMKC2xldmVsX2xpbWl0GAQgASgNEhYKDmNsdWJfdmlwX2xldmVsGAUgASgF",
            "EgwKBHFiXzIYBiABKAUSFAoMY29uc3VtZV90eXBlGAcgASgNEhEKCXRpbWVf",
            "dW5pdBgIIAEoDRIRCglpc19vbmxpbmUYCSABKA0SDwoHY2FuX2J1eRgKIAEo",
            "DRIUCgxjYW5fcmVjaGFyZ2UYCyABKA0SEwoLb25saW5lX3RpbWUYDCABKAwS",
            "FAoMb2ZmbGluZV90aW1lGA0gASgMEh8KF3ByaXZpbGVnZWRfcGxhdF9pZF9s",
            "aXN0GA4gAygNEiEKGXByaXZpbGVnZWRfcGxhdF9pc19vbmxpbmUYDyABKA0S",
            "HwoXcHJpdmlsZWdlZF9wbGF0X2Nhbl9idXkYECABKA0SJAoccHJpdmlsZWdl",
            "ZF9wbGF0X2Nhbl9yZWNoYXJnZRgRIAEoDRIVCg1wYXltZW50X3Rlcm1zGBIg",
            "ASgNEhIKCnZhbGlkX3RpbWUYEyABKAwSFQoNc29ydF9wcmlvcml0eRgUIAEo",
            "DRITCgtzdWl0X251bWJlchgVIAEoBRIZChFiYWdfc29ydF9wcmlvcml0eRgW",
            "IAEoDRIOCgZzdGF0dXMYFyABKAwSDAoEcmFuaxgYIAEoDRIWCg5wcmljZV9k",
            "aXNjb3VudBgZIAEoDRIUCgx2aXBfZGlzY291bnQYGiABKA0SMQoLcHJpY2Vf",
            "dGFibGUYGyADKAsyHC51RnJhbWV3b3JrLkdvb2RzX0luZm8uUHJpY2USNAoK",
            "Z29vZHNfYXR0chgcIAMoCzIgLnVGcmFtZXdvcmsuR29vZHNfSW5mby5Hb29k",
            "c0F0dHISEwoLZGVzY3JpcHRpb24YHSABKAwSEAoIbGltaXRfaWQYHiABKA0S",
            "EwoLc3ViU3lzdGVtSWQYHyABKAwaQgoFUHJpY2USEAoIcHJpY2VfZHEYASAB",
            "KA0SEgoKcHJpY2VfZ29sZBgCIAEoDRITCgtwcmljZV92YWx1ZRgDIAEoDRoy",
            "CglHb29kc0F0dHISEQoJYXR0cl90eXBlGAEgASgNEhIKCmF0dHJfdmFsdWUY",
            "AiABKA0iOQoQR29vZHNfSW5mb19BcnJheRIlCgVpdGVtcxgBIAMoCzIWLnVG",
            "cmFtZXdvcmsuR29vZHNfSW5mb2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::UFramework.Goods_Info), global::UFramework.Goods_Info.Parser, new[]{ "GoodsId", "Name", "Sex", "LevelLimit", "ClubVipLevel", "Qb2", "ConsumeType", "TimeUnit", "IsOnline", "CanBuy", "CanRecharge", "OnlineTime", "OfflineTime", "PrivilegedPlatIdList", "PrivilegedPlatIsOnline", "PrivilegedPlatCanBuy", "PrivilegedPlatCanRecharge", "PaymentTerms", "ValidTime", "SortPriority", "SuitNumber", "BagSortPriority", "Status", "Rank", "PriceDiscount", "VipDiscount", "PriceTable", "GoodsAttr", "Description", "LimitId", "SubSystemId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::UFramework.Goods_Info.Types.Price), global::UFramework.Goods_Info.Types.Price.Parser, new[]{ "PriceDq", "PriceGold", "PriceValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::UFramework.Goods_Info.Types.GoodsAttr), global::UFramework.Goods_Info.Types.GoodsAttr.Parser, new[]{ "AttrType", "AttrValue" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::UFramework.Goods_Info_Array), global::UFramework.Goods_Info_Array.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Goods_Info : pb::IMessage<Goods_Info> {
    private static readonly pb::MessageParser<Goods_Info> _parser = new pb::MessageParser<Goods_Info>(() => new Goods_Info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Goods_Info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UFramework.GoodsInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods_Info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods_Info(Goods_Info other) : this() {
      goodsId_ = other.goodsId_;
      name_ = other.name_;
      sex_ = other.sex_;
      levelLimit_ = other.levelLimit_;
      clubVipLevel_ = other.clubVipLevel_;
      qb2_ = other.qb2_;
      consumeType_ = other.consumeType_;
      timeUnit_ = other.timeUnit_;
      isOnline_ = other.isOnline_;
      canBuy_ = other.canBuy_;
      canRecharge_ = other.canRecharge_;
      onlineTime_ = other.onlineTime_;
      offlineTime_ = other.offlineTime_;
      privilegedPlatIdList_ = other.privilegedPlatIdList_.Clone();
      privilegedPlatIsOnline_ = other.privilegedPlatIsOnline_;
      privilegedPlatCanBuy_ = other.privilegedPlatCanBuy_;
      privilegedPlatCanRecharge_ = other.privilegedPlatCanRecharge_;
      paymentTerms_ = other.paymentTerms_;
      validTime_ = other.validTime_;
      sortPriority_ = other.sortPriority_;
      suitNumber_ = other.suitNumber_;
      bagSortPriority_ = other.bagSortPriority_;
      status_ = other.status_;
      rank_ = other.rank_;
      priceDiscount_ = other.priceDiscount_;
      vipDiscount_ = other.vipDiscount_;
      priceTable_ = other.priceTable_.Clone();
      goodsAttr_ = other.goodsAttr_.Clone();
      description_ = other.description_;
      limitId_ = other.limitId_;
      subSystemId_ = other.subSystemId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods_Info Clone() {
      return new Goods_Info(this);
    }

    /// <summary>Field number for the "goods_id" field.</summary>
    public const int GoodsIdFieldNumber = 1;
    private uint goodsId_;
    /// <summary>
    ///* 商品ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private pb::ByteString name_ = pb::ByteString.Empty;
    /// <summary>
    ///* 商品名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 3;
    private uint sex_;
    /// <summary>
    ///* 性别
    ///不限制：100
    ///male：101
    ///female：102
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    /// <summary>Field number for the "level_limit" field.</summary>
    public const int LevelLimitFieldNumber = 4;
    private uint levelLimit_;
    /// <summary>
    ///* 等级限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelLimit {
      get { return levelLimit_; }
      set {
        levelLimit_ = value;
      }
    }

    /// <summary>Field number for the "club_vip_level" field.</summary>
    public const int ClubVipLevelFieldNumber = 5;
    private int clubVipLevel_;
    /// <summary>
    ///*  达人俱乐部等级限制
    ///（普通商品不用配置或配置0） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClubVipLevel {
      get { return clubVipLevel_; }
      set {
        clubVipLevel_ = value;
      }
    }

    /// <summary>Field number for the "qb_2" field.</summary>
    public const int Qb2FieldNumber = 6;
    private int qb2_;
    /// <summary>
    ///*  2Q币专区
    ///（普通商品不用配置或配置0） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Qb2 {
      get { return qb2_; }
      set {
        qb2_ = value;
      }
    }

    /// <summary>Field number for the "consume_type" field.</summary>
    public const int ConsumeTypeFieldNumber = 7;
    private uint consumeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConsumeType {
      get { return consumeType_; }
      set {
        consumeType_ = value;
      }
    }

    /// <summary>Field number for the "time_unit" field.</summary>
    public const int TimeUnitFieldNumber = 8;
    private uint timeUnit_;
    /// <summary>
    ///* 计时单位
    ///0 默认(天)
    ///1 分钟
    ///2 小时
    ///3 天
    ///4 月
    ///5 年
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeUnit {
      get { return timeUnit_; }
      set {
        timeUnit_ = value;
      }
    }

    /// <summary>Field number for the "is_online" field.</summary>
    public const int IsOnlineFieldNumber = 9;
    private uint isOnline_;
    /// <summary>
    ///* 是否商城上架显示
    ///（根据需要配置上下架时间）
    ///0 否
    ///1 是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsOnline {
      get { return isOnline_; }
      set {
        isOnline_ = value;
      }
    }

    /// <summary>Field number for the "can_buy" field.</summary>
    public const int CanBuyFieldNumber = 10;
    private uint canBuy_;
    /// <summary>
    ///* 能否购买
    ///（已上架物品必然可买，根据需要配置上下架时间）
    ///0 否
    ///1 是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CanBuy {
      get { return canBuy_; }
      set {
        canBuy_ = value;
      }
    }

    /// <summary>Field number for the "can_recharge" field.</summary>
    public const int CanRechargeFieldNumber = 11;
    private uint canRecharge_;
    /// <summary>
    ///* 可否续费
    ///0 否
    ///1 是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CanRecharge {
      get { return canRecharge_; }
      set {
        canRecharge_ = value;
      }
    }

    /// <summary>Field number for the "online_time" field.</summary>
    public const int OnlineTimeFieldNumber = 12;
    private pb::ByteString onlineTime_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OnlineTime {
      get { return onlineTime_; }
      set {
        onlineTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offline_time" field.</summary>
    public const int OfflineTimeFieldNumber = 13;
    private pb::ByteString offlineTime_ = pb::ByteString.Empty;
    /// <summary>
    ///* 下架时间
    ///(YYYY-MM-DD HH:MM:SS)
    ///
    ///1.不填表示用不下架
    ///2.下架的最终确定需结合“有效时间”、“是否上架”
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OfflineTime {
      get { return offlineTime_; }
      set {
        offlineTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privileged_plat_id_list" field.</summary>
    public const int PrivilegedPlatIdListFieldNumber = 14;
    private static readonly pb::FieldCodec<uint> _repeated_privilegedPlatIdList_codec
        = pb::FieldCodec.ForUInt32(114);
    private readonly pbc::RepeatedField<uint> privilegedPlatIdList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> PrivilegedPlatIdList {
      get { return privilegedPlatIdList_; }
    }

    /// <summary>Field number for the "privileged_plat_is_online" field.</summary>
    public const int PrivilegedPlatIsOnlineFieldNumber = 15;
    private uint privilegedPlatIsOnline_;
    /// <summary>
    ///* 是否商城上架显示
    ///（根据需要配置上下架时间）
    ///0 否
    ///1 是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrivilegedPlatIsOnline {
      get { return privilegedPlatIsOnline_; }
      set {
        privilegedPlatIsOnline_ = value;
      }
    }

    /// <summary>Field number for the "privileged_plat_can_buy" field.</summary>
    public const int PrivilegedPlatCanBuyFieldNumber = 16;
    private uint privilegedPlatCanBuy_;
    /// <summary>
    ///* 能否购买
    ///（已上架物品必然可买，根据需要配置上下架时间）
    ///0 否
    ///1 是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrivilegedPlatCanBuy {
      get { return privilegedPlatCanBuy_; }
      set {
        privilegedPlatCanBuy_ = value;
      }
    }

    /// <summary>Field number for the "privileged_plat_can_recharge" field.</summary>
    public const int PrivilegedPlatCanRechargeFieldNumber = 17;
    private uint privilegedPlatCanRecharge_;
    /// <summary>
    ///* 可否续费
    ///0 否
    ///1 是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrivilegedPlatCanRecharge {
      get { return privilegedPlatCanRecharge_; }
      set {
        privilegedPlatCanRecharge_ = value;
      }
    }

    /// <summary>Field number for the "payment_terms" field.</summary>
    public const int PaymentTermsFieldNumber = 18;
    private uint paymentTerms_;
    /// <summary>
    ///* 支付方式
    ///0 默认不限
    ///1 只限QB
    ///2 只限点券
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PaymentTerms {
      get { return paymentTerms_; }
      set {
        paymentTerms_ = value;
      }
    }

    /// <summary>Field number for the "valid_time" field.</summary>
    public const int ValidTimeFieldNumber = 19;
    private pb::ByteString validTime_ = pb::ByteString.Empty;
    /// <summary>
    ///*  有效时间
    ///（过期会从背包删除）
    ///需要再添加
    ///格式如下，日期和时间中间是空格，不是换行！
    ///2011-10-10 00:00:00
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValidTime {
      get { return validTime_; }
      set {
        validTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sort_priority" field.</summary>
    public const int SortPriorityFieldNumber = 20;
    private uint sortPriority_;
    /// <summary>
    ///* 排序优先级
    ///
    ///1~? 优先级递减
    ///0 最低优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortPriority {
      get { return sortPriority_; }
      set {
        sortPriority_ = value;
      }
    }

    /// <summary>Field number for the "suit_number" field.</summary>
    public const int SuitNumberFieldNumber = 21;
    private int suitNumber_;
    /// <summary>
    ///* 配套编号
    ///
    ///-1 散装
    ///0 子id相同默认成套
    ///1~9999 配套编号（允许不同子id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuitNumber {
      get { return suitNumber_; }
      set {
        suitNumber_ = value;
      }
    }

    /// <summary>Field number for the "bag_sort_priority" field.</summary>
    public const int BagSortPriorityFieldNumber = 22;
    private uint bagSortPriority_;
    /// <summary>
    ///* 背包排序优先级
    ///
    ///0~正数优先级递增
    ///
    ///背包排序有较复杂的具体排序逻辑。本数值只用于背包中的【其他】物品的排序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BagSortPriority {
      get { return bagSortPriority_; }
      set {
        bagSortPriority_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 23;
    private pb::ByteString status_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 24;
    private uint rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "price_discount" field.</summary>
    public const int PriceDiscountFieldNumber = 25;
    private uint priceDiscount_;
    /// <summary>
    ///* 折扣（1-100） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PriceDiscount {
      get { return priceDiscount_; }
      set {
        priceDiscount_ = value;
      }
    }

    /// <summary>Field number for the "vip_discount" field.</summary>
    public const int VipDiscountFieldNumber = 26;
    private uint vipDiscount_;
    /// <summary>
    ///* VIP折扣（1-100） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VipDiscount {
      get { return vipDiscount_; }
      set {
        vipDiscount_ = value;
      }
    }

    /// <summary>Field number for the "price_table" field.</summary>
    public const int PriceTableFieldNumber = 27;
    private static readonly pb::FieldCodec<global::UFramework.Goods_Info.Types.Price> _repeated_priceTable_codec
        = pb::FieldCodec.ForMessage(218, global::UFramework.Goods_Info.Types.Price.Parser);
    private readonly pbc::RepeatedField<global::UFramework.Goods_Info.Types.Price> priceTable_ = new pbc::RepeatedField<global::UFramework.Goods_Info.Types.Price>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UFramework.Goods_Info.Types.Price> PriceTable {
      get { return priceTable_; }
    }

    /// <summary>Field number for the "goods_attr" field.</summary>
    public const int GoodsAttrFieldNumber = 28;
    private static readonly pb::FieldCodec<global::UFramework.Goods_Info.Types.GoodsAttr> _repeated_goodsAttr_codec
        = pb::FieldCodec.ForMessage(226, global::UFramework.Goods_Info.Types.GoodsAttr.Parser);
    private readonly pbc::RepeatedField<global::UFramework.Goods_Info.Types.GoodsAttr> goodsAttr_ = new pbc::RepeatedField<global::UFramework.Goods_Info.Types.GoodsAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UFramework.Goods_Info.Types.GoodsAttr> GoodsAttr {
      get { return goodsAttr_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 29;
    private pb::ByteString description_ = pb::ByteString.Empty;
    /// <summary>
    ///* 商品详情 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_id" field.</summary>
    public const int LimitIdFieldNumber = 30;
    private uint limitId_;
    /// <summary>
    ///* 商城购买的限制id
    ///详细配置在
    ///limitation表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitId {
      get { return limitId_; }
      set {
        limitId_ = value;
      }
    }

    /// <summary>Field number for the "subSystemId" field.</summary>
    public const int SubSystemIdFieldNumber = 31;
    private pb::ByteString subSystemId_ = pb::ByteString.Empty;
    /// <summary>
    ///* 使用 跳转id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SubSystemId {
      get { return subSystemId_; }
      set {
        subSystemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Goods_Info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Goods_Info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoodsId != other.GoodsId) return false;
      if (Name != other.Name) return false;
      if (Sex != other.Sex) return false;
      if (LevelLimit != other.LevelLimit) return false;
      if (ClubVipLevel != other.ClubVipLevel) return false;
      if (Qb2 != other.Qb2) return false;
      if (ConsumeType != other.ConsumeType) return false;
      if (TimeUnit != other.TimeUnit) return false;
      if (IsOnline != other.IsOnline) return false;
      if (CanBuy != other.CanBuy) return false;
      if (CanRecharge != other.CanRecharge) return false;
      if (OnlineTime != other.OnlineTime) return false;
      if (OfflineTime != other.OfflineTime) return false;
      if(!privilegedPlatIdList_.Equals(other.privilegedPlatIdList_)) return false;
      if (PrivilegedPlatIsOnline != other.PrivilegedPlatIsOnline) return false;
      if (PrivilegedPlatCanBuy != other.PrivilegedPlatCanBuy) return false;
      if (PrivilegedPlatCanRecharge != other.PrivilegedPlatCanRecharge) return false;
      if (PaymentTerms != other.PaymentTerms) return false;
      if (ValidTime != other.ValidTime) return false;
      if (SortPriority != other.SortPriority) return false;
      if (SuitNumber != other.SuitNumber) return false;
      if (BagSortPriority != other.BagSortPriority) return false;
      if (Status != other.Status) return false;
      if (Rank != other.Rank) return false;
      if (PriceDiscount != other.PriceDiscount) return false;
      if (VipDiscount != other.VipDiscount) return false;
      if(!priceTable_.Equals(other.priceTable_)) return false;
      if(!goodsAttr_.Equals(other.goodsAttr_)) return false;
      if (Description != other.Description) return false;
      if (LimitId != other.LimitId) return false;
      if (SubSystemId != other.SubSystemId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GoodsId != 0) hash ^= GoodsId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Sex != 0) hash ^= Sex.GetHashCode();
      if (LevelLimit != 0) hash ^= LevelLimit.GetHashCode();
      if (ClubVipLevel != 0) hash ^= ClubVipLevel.GetHashCode();
      if (Qb2 != 0) hash ^= Qb2.GetHashCode();
      if (ConsumeType != 0) hash ^= ConsumeType.GetHashCode();
      if (TimeUnit != 0) hash ^= TimeUnit.GetHashCode();
      if (IsOnline != 0) hash ^= IsOnline.GetHashCode();
      if (CanBuy != 0) hash ^= CanBuy.GetHashCode();
      if (CanRecharge != 0) hash ^= CanRecharge.GetHashCode();
      if (OnlineTime.Length != 0) hash ^= OnlineTime.GetHashCode();
      if (OfflineTime.Length != 0) hash ^= OfflineTime.GetHashCode();
      hash ^= privilegedPlatIdList_.GetHashCode();
      if (PrivilegedPlatIsOnline != 0) hash ^= PrivilegedPlatIsOnline.GetHashCode();
      if (PrivilegedPlatCanBuy != 0) hash ^= PrivilegedPlatCanBuy.GetHashCode();
      if (PrivilegedPlatCanRecharge != 0) hash ^= PrivilegedPlatCanRecharge.GetHashCode();
      if (PaymentTerms != 0) hash ^= PaymentTerms.GetHashCode();
      if (ValidTime.Length != 0) hash ^= ValidTime.GetHashCode();
      if (SortPriority != 0) hash ^= SortPriority.GetHashCode();
      if (SuitNumber != 0) hash ^= SuitNumber.GetHashCode();
      if (BagSortPriority != 0) hash ^= BagSortPriority.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (PriceDiscount != 0) hash ^= PriceDiscount.GetHashCode();
      if (VipDiscount != 0) hash ^= VipDiscount.GetHashCode();
      hash ^= priceTable_.GetHashCode();
      hash ^= goodsAttr_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (LimitId != 0) hash ^= LimitId.GetHashCode();
      if (SubSystemId.Length != 0) hash ^= SubSystemId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GoodsId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Sex);
      }
      if (LevelLimit != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LevelLimit);
      }
      if (ClubVipLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ClubVipLevel);
      }
      if (Qb2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Qb2);
      }
      if (ConsumeType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ConsumeType);
      }
      if (TimeUnit != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TimeUnit);
      }
      if (IsOnline != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(IsOnline);
      }
      if (CanBuy != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CanBuy);
      }
      if (CanRecharge != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CanRecharge);
      }
      if (OnlineTime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(OnlineTime);
      }
      if (OfflineTime.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(OfflineTime);
      }
      privilegedPlatIdList_.WriteTo(output, _repeated_privilegedPlatIdList_codec);
      if (PrivilegedPlatIsOnline != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(PrivilegedPlatIsOnline);
      }
      if (PrivilegedPlatCanBuy != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(PrivilegedPlatCanBuy);
      }
      if (PrivilegedPlatCanRecharge != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(PrivilegedPlatCanRecharge);
      }
      if (PaymentTerms != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(PaymentTerms);
      }
      if (ValidTime.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(ValidTime);
      }
      if (SortPriority != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(SortPriority);
      }
      if (SuitNumber != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SuitNumber);
      }
      if (BagSortPriority != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(BagSortPriority);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteBytes(Status);
      }
      if (Rank != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Rank);
      }
      if (PriceDiscount != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(PriceDiscount);
      }
      if (VipDiscount != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(VipDiscount);
      }
      priceTable_.WriteTo(output, _repeated_priceTable_codec);
      goodsAttr_.WriteTo(output, _repeated_goodsAttr_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteBytes(Description);
      }
      if (LimitId != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(LimitId);
      }
      if (SubSystemId.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteBytes(SubSystemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoodsId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sex);
      }
      if (LevelLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelLimit);
      }
      if (ClubVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClubVipLevel);
      }
      if (Qb2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Qb2);
      }
      if (ConsumeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConsumeType);
      }
      if (TimeUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeUnit);
      }
      if (IsOnline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsOnline);
      }
      if (CanBuy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CanBuy);
      }
      if (CanRecharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CanRecharge);
      }
      if (OnlineTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OnlineTime);
      }
      if (OfflineTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OfflineTime);
      }
      size += privilegedPlatIdList_.CalculateSize(_repeated_privilegedPlatIdList_codec);
      if (PrivilegedPlatIsOnline != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrivilegedPlatIsOnline);
      }
      if (PrivilegedPlatCanBuy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PrivilegedPlatCanBuy);
      }
      if (PrivilegedPlatCanRecharge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PrivilegedPlatCanRecharge);
      }
      if (PaymentTerms != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PaymentTerms);
      }
      if (ValidTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ValidTime);
      }
      if (SortPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SortPriority);
      }
      if (SuitNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SuitNumber);
      }
      if (BagSortPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BagSortPriority);
      }
      if (Status.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Status);
      }
      if (Rank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (PriceDiscount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PriceDiscount);
      }
      if (VipDiscount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VipDiscount);
      }
      size += priceTable_.CalculateSize(_repeated_priceTable_codec);
      size += goodsAttr_.CalculateSize(_repeated_goodsAttr_codec);
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Description);
      }
      if (LimitId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LimitId);
      }
      if (SubSystemId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SubSystemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Goods_Info other) {
      if (other == null) {
        return;
      }
      if (other.GoodsId != 0) {
        GoodsId = other.GoodsId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Sex != 0) {
        Sex = other.Sex;
      }
      if (other.LevelLimit != 0) {
        LevelLimit = other.LevelLimit;
      }
      if (other.ClubVipLevel != 0) {
        ClubVipLevel = other.ClubVipLevel;
      }
      if (other.Qb2 != 0) {
        Qb2 = other.Qb2;
      }
      if (other.ConsumeType != 0) {
        ConsumeType = other.ConsumeType;
      }
      if (other.TimeUnit != 0) {
        TimeUnit = other.TimeUnit;
      }
      if (other.IsOnline != 0) {
        IsOnline = other.IsOnline;
      }
      if (other.CanBuy != 0) {
        CanBuy = other.CanBuy;
      }
      if (other.CanRecharge != 0) {
        CanRecharge = other.CanRecharge;
      }
      if (other.OnlineTime.Length != 0) {
        OnlineTime = other.OnlineTime;
      }
      if (other.OfflineTime.Length != 0) {
        OfflineTime = other.OfflineTime;
      }
      privilegedPlatIdList_.Add(other.privilegedPlatIdList_);
      if (other.PrivilegedPlatIsOnline != 0) {
        PrivilegedPlatIsOnline = other.PrivilegedPlatIsOnline;
      }
      if (other.PrivilegedPlatCanBuy != 0) {
        PrivilegedPlatCanBuy = other.PrivilegedPlatCanBuy;
      }
      if (other.PrivilegedPlatCanRecharge != 0) {
        PrivilegedPlatCanRecharge = other.PrivilegedPlatCanRecharge;
      }
      if (other.PaymentTerms != 0) {
        PaymentTerms = other.PaymentTerms;
      }
      if (other.ValidTime.Length != 0) {
        ValidTime = other.ValidTime;
      }
      if (other.SortPriority != 0) {
        SortPriority = other.SortPriority;
      }
      if (other.SuitNumber != 0) {
        SuitNumber = other.SuitNumber;
      }
      if (other.BagSortPriority != 0) {
        BagSortPriority = other.BagSortPriority;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.PriceDiscount != 0) {
        PriceDiscount = other.PriceDiscount;
      }
      if (other.VipDiscount != 0) {
        VipDiscount = other.VipDiscount;
      }
      priceTable_.Add(other.priceTable_);
      goodsAttr_.Add(other.goodsAttr_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.LimitId != 0) {
        LimitId = other.LimitId;
      }
      if (other.SubSystemId.Length != 0) {
        SubSystemId = other.SubSystemId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadBytes();
            break;
          }
          case 24: {
            Sex = input.ReadUInt32();
            break;
          }
          case 32: {
            LevelLimit = input.ReadUInt32();
            break;
          }
          case 40: {
            ClubVipLevel = input.ReadInt32();
            break;
          }
          case 48: {
            Qb2 = input.ReadInt32();
            break;
          }
          case 56: {
            ConsumeType = input.ReadUInt32();
            break;
          }
          case 64: {
            TimeUnit = input.ReadUInt32();
            break;
          }
          case 72: {
            IsOnline = input.ReadUInt32();
            break;
          }
          case 80: {
            CanBuy = input.ReadUInt32();
            break;
          }
          case 88: {
            CanRecharge = input.ReadUInt32();
            break;
          }
          case 98: {
            OnlineTime = input.ReadBytes();
            break;
          }
          case 106: {
            OfflineTime = input.ReadBytes();
            break;
          }
          case 114:
          case 112: {
            privilegedPlatIdList_.AddEntriesFrom(input, _repeated_privilegedPlatIdList_codec);
            break;
          }
          case 120: {
            PrivilegedPlatIsOnline = input.ReadUInt32();
            break;
          }
          case 128: {
            PrivilegedPlatCanBuy = input.ReadUInt32();
            break;
          }
          case 136: {
            PrivilegedPlatCanRecharge = input.ReadUInt32();
            break;
          }
          case 144: {
            PaymentTerms = input.ReadUInt32();
            break;
          }
          case 154: {
            ValidTime = input.ReadBytes();
            break;
          }
          case 160: {
            SortPriority = input.ReadUInt32();
            break;
          }
          case 168: {
            SuitNumber = input.ReadInt32();
            break;
          }
          case 176: {
            BagSortPriority = input.ReadUInt32();
            break;
          }
          case 186: {
            Status = input.ReadBytes();
            break;
          }
          case 192: {
            Rank = input.ReadUInt32();
            break;
          }
          case 200: {
            PriceDiscount = input.ReadUInt32();
            break;
          }
          case 208: {
            VipDiscount = input.ReadUInt32();
            break;
          }
          case 218: {
            priceTable_.AddEntriesFrom(input, _repeated_priceTable_codec);
            break;
          }
          case 226: {
            goodsAttr_.AddEntriesFrom(input, _repeated_goodsAttr_codec);
            break;
          }
          case 234: {
            Description = input.ReadBytes();
            break;
          }
          case 240: {
            LimitId = input.ReadUInt32();
            break;
          }
          case 250: {
            SubSystemId = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Goods_Info message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Price : pb::IMessage<Price> {
        private static readonly pb::MessageParser<Price> _parser = new pb::MessageParser<Price>(() => new Price());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Price> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::UFramework.Goods_Info.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Price() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Price(Price other) : this() {
          priceDq_ = other.priceDq_;
          priceGold_ = other.priceGold_;
          priceValue_ = other.priceValue_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Price Clone() {
          return new Price(this);
        }

        /// <summary>Field number for the "price_dq" field.</summary>
        public const int PriceDqFieldNumber = 1;
        private uint priceDq_;
        /// <summary>
        ///* 点券价格 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PriceDq {
          get { return priceDq_; }
          set {
            priceDq_ = value;
          }
        }

        /// <summary>Field number for the "price_gold" field.</summary>
        public const int PriceGoldFieldNumber = 2;
        private uint priceGold_;
        /// <summary>
        ///* 金币价格 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PriceGold {
          get { return priceGold_; }
          set {
            priceGold_ = value;
          }
        }

        /// <summary>Field number for the "price_value" field.</summary>
        public const int PriceValueFieldNumber = 3;
        private uint priceValue_;
        /// <summary>
        ///* 天数或数量 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PriceValue {
          get { return priceValue_; }
          set {
            priceValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Price);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Price other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PriceDq != other.PriceDq) return false;
          if (PriceGold != other.PriceGold) return false;
          if (PriceValue != other.PriceValue) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PriceDq != 0) hash ^= PriceDq.GetHashCode();
          if (PriceGold != 0) hash ^= PriceGold.GetHashCode();
          if (PriceValue != 0) hash ^= PriceValue.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PriceDq != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PriceDq);
          }
          if (PriceGold != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PriceGold);
          }
          if (PriceValue != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(PriceValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PriceDq != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriceDq);
          }
          if (PriceGold != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriceGold);
          }
          if (PriceValue != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PriceValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Price other) {
          if (other == null) {
            return;
          }
          if (other.PriceDq != 0) {
            PriceDq = other.PriceDq;
          }
          if (other.PriceGold != 0) {
            PriceGold = other.PriceGold;
          }
          if (other.PriceValue != 0) {
            PriceValue = other.PriceValue;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PriceDq = input.ReadUInt32();
                break;
              }
              case 16: {
                PriceGold = input.ReadUInt32();
                break;
              }
              case 24: {
                PriceValue = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class GoodsAttr : pb::IMessage<GoodsAttr> {
        private static readonly pb::MessageParser<GoodsAttr> _parser = new pb::MessageParser<GoodsAttr>(() => new GoodsAttr());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GoodsAttr> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::UFramework.Goods_Info.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GoodsAttr() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GoodsAttr(GoodsAttr other) : this() {
          attrType_ = other.attrType_;
          attrValue_ = other.attrValue_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GoodsAttr Clone() {
          return new GoodsAttr(this);
        }

        /// <summary>Field number for the "attr_type" field.</summary>
        public const int AttrTypeFieldNumber = 1;
        private uint attrType_;
        /// <summary>
        ///* 属性类型
        ///1 HP
        ///2 体力
        ///3 怒气
        ///4 攻击力
        ///5 暴击
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttrType {
          get { return attrType_; }
          set {
            attrType_ = value;
          }
        }

        /// <summary>Field number for the "attr_value" field.</summary>
        public const int AttrValueFieldNumber = 2;
        private uint attrValue_;
        /// <summary>
        ///* 属性值
        ///(HP
        ///头发：150
        ///上身：150
        ///下身：100
        ///表情：50
        ///)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AttrValue {
          get { return attrValue_; }
          set {
            attrValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GoodsAttr);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GoodsAttr other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AttrType != other.AttrType) return false;
          if (AttrValue != other.AttrValue) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AttrType != 0) hash ^= AttrType.GetHashCode();
          if (AttrValue != 0) hash ^= AttrValue.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AttrType != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AttrType);
          }
          if (AttrValue != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AttrValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AttrType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrType);
          }
          if (AttrValue != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttrValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GoodsAttr other) {
          if (other == null) {
            return;
          }
          if (other.AttrType != 0) {
            AttrType = other.AttrType;
          }
          if (other.AttrValue != 0) {
            AttrValue = other.AttrValue;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                AttrType = input.ReadUInt32();
                break;
              }
              case 16: {
                AttrValue = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Goods_Info_Array : pb::IMessage<Goods_Info_Array> {
    private static readonly pb::MessageParser<Goods_Info_Array> _parser = new pb::MessageParser<Goods_Info_Array>(() => new Goods_Info_Array());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Goods_Info_Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UFramework.GoodsInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods_Info_Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods_Info_Array(Goods_Info_Array other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Goods_Info_Array Clone() {
      return new Goods_Info_Array(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::UFramework.Goods_Info> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::UFramework.Goods_Info.Parser);
    private readonly pbc::RepeatedField<global::UFramework.Goods_Info> items_ = new pbc::RepeatedField<global::UFramework.Goods_Info>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UFramework.Goods_Info> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Goods_Info_Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Goods_Info_Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Goods_Info_Array other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
