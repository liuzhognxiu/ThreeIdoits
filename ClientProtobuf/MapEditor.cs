// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapEditor.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from mapEditor.proto</summary>
public static partial class MapEditorReflection {

  #region Descriptor
  /// <summary>File descriptor for mapEditor.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MapEditorReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9tYXBFZGl0b3IucHJvdG8iewoNTWFwRWRpdG9yRGF0YRINCgVXaWR0aBgB",
          "IAEoBRIOCgZIZWlnaHQYAiABKAUSEQoJQ2VsbFdpZHRoGAMgASgCEhIKCkNl",
          "bGxIZWlnaHQYBCABKAISJAoITWFwQ2VsbHMYBSADKAsyEi5NYXBFZGl0b3JD",
          "ZWxsRGF0YSJJChFNYXBFZGl0b3JDZWxsRGF0YRIeCgZTdGF0dXMYASABKA4y",
          "Di5NYXBDZWxsU3RhdHVzEgkKAVgYAiABKAUSCQoBWRgDIAEoBSowCg1NYXBD",
          "ZWxsU3RhdHVzEggKBE5vbmUQABIKCgZOb3JtYWwQARIJCgVCbG9jaxACYgZw",
          "cm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MapCellStatus), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MapEditorData), global::MapEditorData.Parser, new[]{ "Width", "Height", "CellWidth", "CellHeight", "MapCells" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MapEditorCellData), global::MapEditorCellData.Parser, new[]{ "Status", "X", "Y" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum MapCellStatus {
  [pbr::OriginalName("None")] None = 0,
  [pbr::OriginalName("Normal")] Normal = 1,
  [pbr::OriginalName("Block")] Block = 2,
}

#endregion

#region Messages
public sealed partial class MapEditorData : pb::IMessage<MapEditorData> {
  private static readonly pb::MessageParser<MapEditorData> _parser = new pb::MessageParser<MapEditorData>(() => new MapEditorData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MapEditorData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MapEditorReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapEditorData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapEditorData(MapEditorData other) : this() {
    width_ = other.width_;
    height_ = other.height_;
    cellWidth_ = other.cellWidth_;
    cellHeight_ = other.cellHeight_;
    mapCells_ = other.mapCells_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapEditorData Clone() {
    return new MapEditorData(this);
  }

  /// <summary>Field number for the "Width" field.</summary>
  public const int WidthFieldNumber = 1;
  private int width_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Width {
    get { return width_; }
    set {
      width_ = value;
    }
  }

  /// <summary>Field number for the "Height" field.</summary>
  public const int HeightFieldNumber = 2;
  private int height_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Height {
    get { return height_; }
    set {
      height_ = value;
    }
  }

  /// <summary>Field number for the "CellWidth" field.</summary>
  public const int CellWidthFieldNumber = 3;
  private float cellWidth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CellWidth {
    get { return cellWidth_; }
    set {
      cellWidth_ = value;
    }
  }

  /// <summary>Field number for the "CellHeight" field.</summary>
  public const int CellHeightFieldNumber = 4;
  private float cellHeight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float CellHeight {
    get { return cellHeight_; }
    set {
      cellHeight_ = value;
    }
  }

  /// <summary>Field number for the "MapCells" field.</summary>
  public const int MapCellsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::MapEditorCellData> _repeated_mapCells_codec
      = pb::FieldCodec.ForMessage(42, global::MapEditorCellData.Parser);
  private readonly pbc::RepeatedField<global::MapEditorCellData> mapCells_ = new pbc::RepeatedField<global::MapEditorCellData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MapEditorCellData> MapCells {
    get { return mapCells_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MapEditorData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MapEditorData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Width != other.Width) return false;
    if (Height != other.Height) return false;
    if (CellWidth != other.CellWidth) return false;
    if (CellHeight != other.CellHeight) return false;
    if(!mapCells_.Equals(other.mapCells_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Width != 0) hash ^= Width.GetHashCode();
    if (Height != 0) hash ^= Height.GetHashCode();
    if (CellWidth != 0F) hash ^= CellWidth.GetHashCode();
    if (CellHeight != 0F) hash ^= CellHeight.GetHashCode();
    hash ^= mapCells_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Width != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Width);
    }
    if (Height != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Height);
    }
    if (CellWidth != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(CellWidth);
    }
    if (CellHeight != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(CellHeight);
    }
    mapCells_.WriteTo(output, _repeated_mapCells_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Width != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
    }
    if (Height != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
    }
    if (CellWidth != 0F) {
      size += 1 + 4;
    }
    if (CellHeight != 0F) {
      size += 1 + 4;
    }
    size += mapCells_.CalculateSize(_repeated_mapCells_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MapEditorData other) {
    if (other == null) {
      return;
    }
    if (other.Width != 0) {
      Width = other.Width;
    }
    if (other.Height != 0) {
      Height = other.Height;
    }
    if (other.CellWidth != 0F) {
      CellWidth = other.CellWidth;
    }
    if (other.CellHeight != 0F) {
      CellHeight = other.CellHeight;
    }
    mapCells_.Add(other.mapCells_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Width = input.ReadInt32();
          break;
        }
        case 16: {
          Height = input.ReadInt32();
          break;
        }
        case 29: {
          CellWidth = input.ReadFloat();
          break;
        }
        case 37: {
          CellHeight = input.ReadFloat();
          break;
        }
        case 42: {
          mapCells_.AddEntriesFrom(input, _repeated_mapCells_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class MapEditorCellData : pb::IMessage<MapEditorCellData> {
  private static readonly pb::MessageParser<MapEditorCellData> _parser = new pb::MessageParser<MapEditorCellData>(() => new MapEditorCellData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MapEditorCellData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MapEditorReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapEditorCellData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapEditorCellData(MapEditorCellData other) : this() {
    status_ = other.status_;
    x_ = other.x_;
    y_ = other.y_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapEditorCellData Clone() {
    return new MapEditorCellData(this);
  }

  /// <summary>Field number for the "Status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::MapCellStatus status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MapCellStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "X" field.</summary>
  public const int XFieldNumber = 2;
  private int x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "Y" field.</summary>
  public const int YFieldNumber = 3;
  private int y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MapEditorCellData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MapEditorCellData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (X != 0) hash ^= X.GetHashCode();
    if (Y != 0) hash ^= Y.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (X != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(X);
    }
    if (Y != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Y);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (X != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
    }
    if (Y != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MapEditorCellData other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.X != 0) {
      X = other.X;
    }
    if (other.Y != 0) {
      Y = other.Y;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::MapCellStatus) input.ReadEnum();
          break;
        }
        case 16: {
          X = input.ReadInt32();
          break;
        }
        case 24: {
          Y = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
